{
  "stats": {
    "suites": 120,
    "tests": 101,
    "passes": 101,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-18T21:52:57.299Z",
    "end": "2019-11-18T21:53:21.010Z",
    "duration": 23711,
    "testsRegistered": 101,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "cab12481-1fa6-4577-87b9-d127cf14c4ef",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e81e3626-ca28-4439-a166-01bcdc1da3f7",
        "title": "main-api",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3a0ae2a-2483-454f-8f90-28f302b8a090",
            "title": "GET /api/checkAgent",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/checkAgent should return 200",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/checkAgent') )\n\t\t\t.then( (res) => {\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(res.body.status, 0);\n\t\t\t\tassert.strictEqual(typeof res.body.version, 'string');\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "5ca3501e-f4cb-4abc-9ffe-dca48cf1223c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ca3501e-f4cb-4abc-9ffe-dca48cf1223c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8be34aa0-03f8-44dc-9f0a-6527d6d094e4",
            "title": "GET /api/checkPort",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/checkPort should return 200",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/checkPort?port='+PORT+'&host='+HOST) )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(res.body.result, true);\n\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "6bd608b2-eb6d-4e45-b59a-d134910db1f9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6bd608b2-eb6d-4e45-b59a-d134910db1f9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "77f551d0-040d-4683-81ea-d06a0172c6db",
            "title": "GET /api/admin/os/cpus",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/admin/os/cpus should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/admin/os/cpus') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body), true, 'body is array')\t\t\n\t\t\t\tassert.strictEqual(res.body.length > 0, true, 'result is empty')\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "51ba9c22-82b8-4e49-be72-0767d3361286",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51ba9c22-82b8-4e49-be72-0767d3361286"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d5e125cb-4bec-4b08-a0de-91e74dba50b9",
            "title": "POST /api/getConfig",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api POST /api/getConfig should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('POST', '/api/getConfig') )\n.then( (res) => {\t\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.data, 'string');\n\tconfData = res.body.data\n\tdone()\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5f75eaf6-9b20-4d38-93cb-1ef6a6dfd39f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f75eaf6-9b20-4d38-93cb-1ef6a6dfd39f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "750ec3ab-3c22-40cd-a4c1-184e1abf9219",
            "title": "POST /api/setConfig without data",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "main-api POST /api/setConfig without data should return 400",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {}\nexecRequestExpectError(updateOpt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "19c631e8-6403-449d-9d89-a3477b3ba157",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "19c631e8-6403-449d-9d89-a3477b3ba157"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "97a13d11-6421-46de-965f-15b4557599df",
            "title": "POST /api/setConfig without data.getConfig()",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "main-api POST /api/setConfig without data.getConfig() should return 400",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {\n\tdata: '{}'\n}\n\nexecRequestExpectError(updateOpt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "10fa4b0d-f872-4d73-864a-bdcd10cab8d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10fa4b0d-f872-4d73-864a-bdcd10cab8d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "24ea943f-38a2-4b87-b615-dc284e4b394a",
            "title": "POST /api/setConfig",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api POST /api/setConfig should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {\n\tdata: confData\n}\n\nrequest( updateOpt )\n.then( (res) => {\t\n\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.data, 'string');\n\tdone()\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c087ce21-b01c-41b5-8110-8027ecef52b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c087ce21-b01c-41b5-8110-8027ecef52b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e6baf88-93c4-4606-b294-e83c15139697",
        "title": "plugin-dns",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2be39662-22da-4ffa-b774-8fb3d5bf82b3",
            "title": "GET /_plugin/dns/dnsReverse",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse should return 200",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=1.1.1.1') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '1.1.1.1')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, ['one.one.one.one'] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "3e8a6a2e-c5d6-4da6-b556-d88999120488",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e8a6a2e-c5d6-4da6-b556-d88999120488"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d940cab8-a172-41b9-8a16-d2faec778478",
            "title": "GET /_plugin/dns/dnsReverse",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=1.1.1.1') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '1.1.1.1')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, ['one.one.one.one'] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "dfebd8d2-5140-4df0-a485-a15af2b0efc2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfebd8d2-5140-4df0-a485-a15af2b0efc2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "171542c5-4b02-48d6-a3e5-0d9319009cf8",
            "title": "GET /_plugin/dns/dnsReverse (no result)",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse (no result) should return 200",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=0.0.0.0') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '0.0.0.0')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, [] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "46b6afd4-85e9-4267-bdd8-330209a5b3be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "46b6afd4-85e9-4267-bdd8-330209a5b3be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "90cfe225-83b8-487c-b2e3-441b7c057817",
        "title": "GET /_plugin/filesystem",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 404",
            "fullTitle": "GET /_plugin/filesystem should return 404",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem')\nexecRequestExpectError(opt, done, 404)",
            "err": {},
            "isRoot": false,
            "uuid": "475aed3d-6ef5-4f3d-a1d5-57eb8a46dae3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "475aed3d-6ef5-4f3d-a1d5-57eb8a46dae3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5de2aa2b-9a4f-441f-8084-f37df63274ee",
        "title": "/_plugin/filesystem/moveFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5c1ac048-1a7d-4a8e-b1ac-fa961afbd7f7",
            "title": "POST /moveFile no path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile no path should return 400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let dest = tmpDir\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "8bfaa879-a647-4c96-9d10-de01dd72b4be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8bfaa879-a647-4c96-9d10-de01dd72b4be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1ab2e2e9-c14b-4688-b109-e0e8df63184d",
            "title": "POST /moveFile no dest",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile no dest should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/testmove1.txt'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: path\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "44197c80-10df-4fd4-b4af-1977e6913786",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44197c80-10df-4fd4-b4af-1977e6913786"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bf49a2b0-5e30-4af5-801a-84ad17fefe67",
            "title": "POST /moveFile to directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 - dest is directory",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile to directory should return 400 - dest is directory",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test-move1.txt'\nlet dest = tmpDir\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "473983fc-5752-4e16-bb58-8af83e0d47dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "473983fc-5752-4e16-bb58-8af83e0d47dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2100095f-0910-4b4c-b7cf-f2d085581800",
            "title": "POST /moveFile dest directory does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile dest directory does not exists should return error",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test-move1.txt'\nlet dest = tmpDir+'/blablabla/index.txt'\nif (fs.pathExistsSync(tmpDir+'/blablabla'))\n\tfs.unlinkSync(tmpDir+'/blablabla')\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "c84aba2e-9e48-49ff-acda-74b326dd426c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c84aba2e-9e48-49ff-acda-74b326dd426c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0406f869-5c42-450b-a766-e3a7d553f9d0",
            "title": "POST /moveFile path=\\\\localhost\\d$\\tmp/test.txt",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile path=\\\\localhost\\d$\\tmp/test.txt should return 200",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nif (fs.pathExistsSync(dest))\n\tfs.unlinkSync(dest)\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "72946663-4f53-4d72-8a66-3c48dc1cf734",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72946663-4f53-4d72-8a66-3c48dc1cf734"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "072f8d60-4308-4620-8064-2f975d5f6ba6",
            "title": "POST /moveFile - dest already exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile - dest already exists should return 400",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "eb50a653-7634-4bf2-96bb-10fe504971c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb50a653-7634-4bf2-96bb-10fe504971c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "adc21af2-da27-47e1-a993-b083cfae265f",
            "title": "POST /moveFile - dest already exists - overwrite=true",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile - dest already exists - overwrite=true should return 200",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest,\n\toverwrite: true\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4a1f2195-161d-43c8-bba9-2da537ffa2be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4a1f2195-161d-43c8-bba9-2da537ffa2be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d02612f2-7971-4f2f-b7d7-c7410eaf158c",
            "title": "POST /moveFile source is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error - source is directory",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile source is directory should return error - source is directory",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir\nlet dest = tmpDir+'/testMoved.txt'\nif (fs.pathExistsSync(dest))\n\tfs.unlinkSync(dest)\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "4153a85e-901b-4d4e-b85d-1e6c5cc45037",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4153a85e-901b-4d4e-b85d-1e6c5cc45037"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cd5c5016-26e5-4f75-a2e6-6100dd4fa663",
        "title": "/_plugin/filesystem/copyFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "83101c30-775e-4a16-b050-de45abc93073",
            "title": "POST /copyFile dest is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest is directory should return 400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "47ca9a4a-84ea-4265-bbcf-69d94ed1a37a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "47ca9a4a-84ea-4265-bbcf-69d94ed1a37a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e5966791-9b46-4ddf-a4f1-3ae3ffb708e4",
            "title": "POST /copyFile dest already exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest already exists should return 200",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/index.txt'\nif (!fs.pathExistsSync(dest))\n\tfs.writeFileSync(dest, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\t\t\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a69d1d74-c7ab-430a-944b-9fa989a6ab24",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a69d1d74-c7ab-430a-944b-9fa989a6ab24"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "eff2f8e0-46d7-4355-b880-7261f8f10bb2",
            "title": "POST /copyFile path does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile path does not exists should return error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceDir+'/blablabla'\nlet dest = tmpDir+'/blablabla'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "0c43c0a1-db7b-46dd-8c00-248697deceff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c43c0a1-db7b-46dd-8c00-248697deceff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f41a6f24-926b-4340-920f-7492f3bcef14",
            "title": "POST /copyFile dest directory does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest directory does not exists should return 400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/blablabla/index.txt'\nif (fs.pathExistsSync(tmpDir+'/blablabla'))\n\tfs.removeSync(tmpDir+'/blablabla')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "19921d31-c6fb-4ac1-91f1-85ba93880585",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "19921d31-c6fb-4ac1-91f1-85ba93880585"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2ba63028-084f-4343-945c-044d8153a059",
            "title": "POST /copyFile path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/index.txt'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a45f126c-44cd-4d1d-abd2-de75ee9e2864",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a45f126c-44cd-4d1d-abd2-de75ee9e2864"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a79932f8-b9d6-430a-bb67-4a5b941b87f9",
            "title": "POST /copyFile source is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error - source is directory",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile source is directory should return error - source is directory",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir\nlet dest = tmpDir+'/testMoved.txt'\n\t\t\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "de67d828-fe42-4dd4-8d08-dbcb34e6717f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de67d828-fe42-4dd4-8d08-dbcb34e6717f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2a9cb10d-bb39-4b3c-a3f2-d62451f447bf",
        "title": "/_plugin/filesystem/fileinfo",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f873e069-8e73-4245-92c5-8809b86ad59a",
            "title": "GET /fileinfo path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo?path='+sourceFile)\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.name, 'index.js');\n\tassert.strictEqual(res.body.contentType.contains('application/javascript'), true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ba0120c-3126-4b0a-bd68-bf9713481e9e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ba0120c-3126-4b0a-bd68-bf9713481e9e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2b805ce9-12c2-4dbb-81a3-28f9ba3b0a79",
            "title": "GET /fileinfo path=blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo path=blablabla should return error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo?path=blablabla')\n\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "c7341540-2180-4ae4-aae4-edcd5be5b7c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7341540-2180-4ae4-aae4-edcd5be5b7c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5a31201b-6fb3-4d72-ac40-eaab5143c86b",
            "title": "GET /fileinfo",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo')\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "ee55b85a-abc2-4cda-bc16-a3f75b850cc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee55b85a-abc2-4cda-bc16-a3f75b850cc5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3b516da6-fc0c-4320-b8f5-9b3a279a76ce",
        "title": "/_plugin/filesystem/fileExists",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "02a9863a-0f88-49d4-96f1-e62e25723ed7",
            "title": "GET /fileExists path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists?path='+sourceFile)\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "29f19e7e-fc16-4acd-bf5d-936f2646e2cb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29f19e7e-fc16-4acd-bf5d-936f2646e2cb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "68fdf78a-b6a7-4594-b39c-10c234bc5936",
            "title": "GET /fileExists path=blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists path=blablabla should return error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists?path=blablabla')\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, false);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "94c2afdf-dc99-40fc-8cac-da68ffd524ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94c2afdf-dc99-40fc-8cac-da68ffd524ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f0423c9a-60f0-4263-8069-b1557b1d16eb",
            "title": "GET /fileExists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists')\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "d0c39f9a-0d4d-400b-9d8b-34b2a2b53520",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d0c39f9a-0d4d-400b-9d8b-34b2a2b53520"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dc36b16e-607e-40e8-b56d-3e5f1ef0286c",
        "title": "/_plugin/filesystem/execScript",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5c34f216-9691-4732-bed8-aeb8b345b7bd",
            "title": "POST execScript type=shell",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=shell should return 200",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"dir\"\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.exitCode, 0);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f8316816-46a9-41ac-ba2a-8bd361e62f01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f8316816-46a9-41ac-ba2a-8bd361e62f01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8f6aae7e-85bb-474b-a4b7-0c6f1d2e0607",
            "title": "POST execScript type=blabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error 400",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=blabla should return error 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"dir\",\n\ttype: 'blabla'\n}\nexecRequestExpectError(opt, done, 412)",
                "err": {},
                "isRoot": false,
                "uuid": "8b11422f-5cb3-449f-862b-79aed030335e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b11422f-5cb3-449f-862b-79aed030335e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "db3588f7-e5d8-42c9-bcfb-49c9bb7ccc30",
            "title": "POST execScript type=javascript with result",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with result should return 200",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"result = 2*2\",\n\ttype: 'javascript'\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.stdout, 4);\n\tassert.strictEqual(res.body.exitCode, 0);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ba5abe81-236f-4156-9500-038f7b3c41fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba5abe81-236f-4156-9500-038f7b3c41fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "14712fc3-f3e9-4f3d-9f5d-3205e1a0f564",
            "title": "POST execScript type=javascript with result && exitCode",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with result && exitCode should return 200",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"result = 2*2\\nexitCode=2\",\n\ttype: 'javascript'\n}\nrequest( opt )\n.then( (res) => {\t\n\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.stdout, 4);\n\tassert.strictEqual(res.body.exitCode, 2);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "192e833f-e8bf-4467-b468-31c4d7d44ab7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "192e833f-e8bf-4467-b468-31c4d7d44ab7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "427bbb7a-1df7-4f52-8e47-40682844a380",
            "title": "POST execScript type=javascript with syntax error",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with syntax error should return 500",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"blabla\",\n\ttype: 'javascript'\n}\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "495ea389-045b-442b-ab0a-7f724308bbda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "495ea389-045b-442b-ab0a-7f724308bbda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ff1cd2d2-0dbd-48bb-8283-02cb5807b059",
        "title": "/_plugin/filesystem/writeTextFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "01925d93-7b56-4f3e-9d17-d67549bb5957",
            "title": "POST /_plugin/filesystem/writeTextFile",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/writeTextFile POST /_plugin/filesystem/writeTextFile should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/writeTextFile')\n\t\t\topt.body = {\npath: tmpDir+\"/writeTextFile.txt\",\ncontent: 'test'\n\t\t\t}\n\n\t\t\trequest( opt )\n\t\t\t.then( (res) => {\t\n\t\t\nassert.strictEqual(res.statusCode, 200);\nassert.strictEqual(typeof res.body, 'object');\nassert.strictEqual(typeof res.body.path, 'string');\nassert.strictEqual(res.body.result, true);\ndone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\ndone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "4605e360-f29c-41e6-8ed1-18a42f2d72fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4605e360-f29c-41e6-8ed1-18a42f2d72fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "edc20bb6-4518-41ec-91f1-99c1722211e2",
            "title": "POST writeTextFile, path does not exist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/filesystem/writeTextFile POST writeTextFile, path does not exist should return 500",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/writeTextFile')\n\t\t\topt.body = {\npath: tmpDir+\"/blabla/writeTextFile.txt\",\ncontent: 'test'\n\t\t\t}\n\n\t\t\texecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "c7809c04-f4ca-4a7c-9a4c-d4d8384297f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7809c04-f4ca-4a7c-9a4c-d4d8384297f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "276ed276-a1f6-4b90-9a40-8b4c92df10d1",
        "title": "/_plugin/filesystem/list",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5098ad9c-8aed-4fa1-b6fe-5e4b2ed16014",
            "title": "GET path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 23);\n\tassert.strictEqual(res.body.files.length, 23);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c2f43829-edca-4a94-8a90-5d6593791959",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c2f43829-edca-4a94-8a90-5d6593791959"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "94ba0cb7-3afe-48c3-ae7f-219b9b47dca7",
            "title": "GET recursive=false&filter=*.map&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 5 .map files",
                "fullTitle": "/_plugin/filesystem/list GET recursive=false&filter=*.map&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return 5 .map files",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=false&filter=*.map&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 6);\n\tassert.strictEqual(res.body.files.length, 6);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "107165cd-e576-45df-b14d-688b2769250c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "107165cd-e576-45df-b14d-688b2769250c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b35730bb-f055-41b5-afa7-96ad462d5f96",
            "title": "GET recursive=true&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=true&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 244);\n\tassert.strictEqual(res.body.files.length, 244);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7665de31-6671-42db-9edf-d41a6e53da4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7665de31-6671-42db-9edf-d41a6e53da4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 32,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c49df49b-62f3-4eb9-abed-4f54733507f5",
            "title": "GET recursive=true&filter=*.js&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&filter=*.js&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=true&filter=*.js&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 73);\n\tassert.strictEqual(res.body.files.length, 73);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "241619f8-4a6e-4d75-832b-cecc81206083",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "241619f8-4a6e-4d75-832b-cecc81206083"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7c776511-a042-4454-aaa6-6866f18643bd",
            "title": "GET recursive=true&maxResults=10&filter=*.ts&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&maxResults=10&filter=*.ts&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=true&maxResults=10&filter=*.ts&path='+sourceDir\n\trequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n\t.then( (res) => {\t\n\t\tassert.strictEqual(res.statusCode, 200);\n\t\tassert.strictEqual(typeof res.body, 'object');\n\t\tassert.strictEqual(typeof res.body.files, 'object');\n\t\tassert.strictEqual(typeof res.body.files.push, 'function');\n\t\tassert.strictEqual(res.body.total, 73);\n\t\tassert.strictEqual(res.body.files.length, 10);\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "825bf391-40cf-4514-a850-3560d9c67591",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "825bf391-40cf-4514-a850-3560d9c67591"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3e83ec4b-1a25-4193-ab13-b4d360e6b6d1",
            "title": "GET recursive=true&path=/blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&path=/blablabla should return error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=true&path=/blablabla'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/list?'+query)\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "d6fbedd9-d565-45b5-89b3-0e7b589efe96",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6fbedd9-d565-45b5-89b3-0e7b589efe96"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0812900a-32db-4b73-8ed8-a7a1cebf9749",
        "title": "/_plugin/filesystem/upload",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3804c65b-5b91-4489-a1f0-509ef238b0de",
            "title": "upload file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/upload upload file should return 200",
                "timedOut": false,
                "duration": 676,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload.txt'\n\tif (fs.pathExistsSync(path))\n\t\tfs.unlinkSync(path)\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload?path='+path)\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        },\n        file2: {\n            value: fs.createReadStream(sourceDir+'/Application.js'),\n            options: {\n                filename: 'Application.js',\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\trequest( opt )\n\t.then( (res) => {\t\n\t\t//console.log( res.body)\n\t\tassert.strictEqual(res.statusCode, 200);\n\t\tassert.strictEqual(typeof res.body, 'object', 'body is not object');\n\t\tassert.strictEqual(typeof res.body.file, 'object', 'body.file is not object');\t\t\t\t\n\t\tassert.strictEqual(res.body.path, path, 'body.path != '+path);\n\t\tassert.strictEqual(fs.pathExistsSync(path), true, 'uploaded file does not exists');\n\t\tassert.strictEqual(fs.statSync(path).size != 0, true, 'uploaded file size != 0');\n\t\t\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "ac40bd49-bd05-4c01-9b7d-91bdda5b1430",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ac40bd49-bd05-4c01-9b7d-91bdda5b1430"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 676,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "36076cf2-0cc6-487d-937d-4cabc7ca80f8",
            "title": "upload no file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/upload upload no file should return error",
                "timedOut": false,
                "duration": 729,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload2.txt'\n\tif (fs.pathExistsSync(path))\n\t\tfs.unlinkSync(path)\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload?path='+path)\n\t\n\topt.formData = {\n        name: sourceFileName,\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "76155bee-fec2-4a54-906e-8aa5ead718cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76155bee-fec2-4a54-906e-8aa5ead718cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 729,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5165df28-d48e-444d-bd3d-3e4592e3fec5",
            "title": "upload file - dest is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 (dest is a directory)",
                "fullTitle": "/_plugin/filesystem/upload upload file - dest is directory should return 400 (dest is a directory)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload?path='+path)\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "6f069a2f-9aa8-45f4-8f86-09db33a316a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6f069a2f-9aa8-45f4-8f86-09db33a316a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bc2cfd80-4e1f-43c5-ad00-bf8bf67066b6",
            "title": "upload file - dest directory does not exist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 (dest a directory does not exist)",
                "fullTitle": "/_plugin/filesystem/upload upload file - dest directory does not exist should return 400 (dest a directory does not exist)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/uploadblablabla/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload?path='+path)\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "30362ed3-7857-4dcb-8906-85481b460e13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30362ed3-7857-4dcb-8906-85481b460e13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2353a319-8cf1-44ea-807b-6a657d54de88",
            "title": "upload existing file - overwrite=false",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/upload upload existing file - overwrite=false should return error",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload?path='+path+'&overwrite=false')\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "a0b4e4d6-a98b-4efa-a00c-075cf9084a6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0b4e4d6-a98b-4efa-a00c-075cf9084a6a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "64c44e12-9eb2-47a7-9019-afbb23ef4170",
        "title": "/_plugin/filesystem/deleteFiles",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3b3f883-297e-4157-b2e4-76c549564fae",
            "title": "delete existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/deleteFiles delete existing file should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/fileToDelete.txt'\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/deleteFiles')\nopt.body = {\n\tpath: path\n}\nfs.writeFileSync(path, 'test')\n\t\t\nrequest( opt )\n.then( (res) => {\t\n\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(fs.pathExistsSync(path), false);\n\tassert.strictEqual(res.body.result, true);\n\tassert.strictEqual(typeof res.body.filename, 'string');\n\tassert.strictEqual(res.body.path, path);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d6e773de-891f-4666-8cda-f75249991a5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6e773de-891f-4666-8cda-f75249991a5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5b30af38-a029-47f8-af1b-04363638754d",
            "title": "delete not existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 404",
                "fullTitle": "/_plugin/filesystem/deleteFiles delete not existing file should return 404",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/fileToDelete.txt'\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/deleteFiles')\nopt.body = {\n\tpath: path\n}\nif (fs.pathExistsSync(path))\n\tfs.unlinkSync(path)\n\t\t\nexecRequestExpectError(opt, done, 404)",
                "err": {},
                "isRoot": false,
                "uuid": "8b0302f6-37e0-4796-bec8-1243f725c99d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b0302f6-37e0-4796-bec8-1243f725c99d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b740862a-f077-4ac3-b5ad-b43fafb4a155",
        "title": "/_plugin/filesystem/download",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d9931b0b-b95a-4c0c-bba9-77668042af84",
            "title": "Download existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download existing file should return 200",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\tassert.strictEqual(res.headers['content-type'], 'application/javascript; charset=UTF-8');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"index.js\"');\n\tassert.strictEqual(res.headers['content-length'] > 0 , true, 'content-type > 0');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "596332e6-ceff-455f-aa6c-862c880ca101",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "596332e6-ceff-455f-aa6c-862c880ca101"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c73dc16c-3afe-4f54-a215-c1726715513a",
            "title": "Download existing file - compress=false",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download existing file - compress=false should return 200",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile+'&compress=false'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\t/*assert.strictEqual(res.headers['content-type'], 'application/javascript');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"index.js\"');*/\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "718f8878-3ff3-4fb3-832d-196c8b815f63",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "718f8878-3ff3-4fb3-832d-196c8b815f63"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6c26e555-8d49-4da0-ada5-281975aab8eb",
            "title": "Download file - file does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 404",
                "fullTitle": "/_plugin/filesystem/download Download file - file does not exists should return 404",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile+'/balbalba'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nexecRequestExpectError(opt, done, 404)",
                "err": {},
                "isRoot": false,
                "uuid": "90a68c53-2bd9-4880-8604-75f206c4d3c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "90a68c53-2bd9-4880-8604-75f206c4d3c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f365ab84-5d0a-44a2-9bf9-dab68a0c283b",
            "title": "Download directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download directory should return 200",
                "timedOut": false,
                "duration": 433,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceDir\nlet dest = tmpDir+'/downloadZip.zip'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nif (fs.pathExistsSync(dest))\n\tfs.unlinkSync(dest)\nlet destFileStream = fs.createWriteStream(dest);\nrequest( opt , (error, res, body) => {\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\tassert.strictEqual(res.headers['content-type'], 'application/zip');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"dist.zip\"');\t\t\n})\n.pipe(destFileStream)\n\t\t    .on('finish', () => {\n\n\t\t    \tif (fs.pathExistsSync(dest) && (fs.statSync(dest).size > 0))\n\t\t       \t\tdone();\t\t \t      \n\t\t       \telse\n\t\t       \t\tdone('Downloaded file does not exists or is empty');\t\t \t      \n\t\t    })\n\t\t    .on('error', (error) => {\n\t\t        done(error);\n\t\t    })",
                "err": {},
                "isRoot": false,
                "uuid": "448fabde-ff93-4f29-9884-820b9074d954",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "448fabde-ff93-4f29-9884-820b9074d954"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 433,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0d74ef68-8e63-4599-bb82-754ec9b5d761",
        "title": "plugin-http",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1fd43411-6965-4ffe-8b04-0bde6fe3117a",
            "title": "POST /_plugin/http/request",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-http POST /_plugin/http/request should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+':'+PORT+'/api/checkAgent',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\t\n\t//console.log(res.body)\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.body, 'object');\n\tassert.strictEqual(res.body.body.status, 0);\n\texpect(res.body.status).to.equal(200);\n\tassert.strictEqual(typeof res.body.body.version, 'string');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "24a353ea-6291-45e9-957a-5dffc92d28a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24a353ea-6291-45e9-957a-5dffc92d28a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b484b22a-6a0e-47bd-9f6c-c8c8105027fb",
            "title": "POST /_plugin/http/request to unkown host",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200 - content is error",
                "fullTitle": "plugin-http POST /_plugin/http/request to unkown host should return 200 - content is error",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+'blablabla:'+PORT+'/api/checkAgent',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\t\n\t//console.log(res.body)\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.isError, true);\n\tassert.strictEqual(typeof res.body.error !== 'undefined', true);\n\tassert.strictEqual(res.body.status, null);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ee1577f4-d95f-47c0-bc0a-5b36bda94eb7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee1577f4-d95f-47c0-bc0a-5b36bda94eb7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fedaf6cc-8299-4944-8e13-45b992e64748",
            "title": "POST /_plugin/http/request to unkown url",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200 - content is error 404",
                "fullTitle": "plugin-http POST /_plugin/http/request to unkown url should return 200 - content is error 404",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+':'+PORT+'/api/checkAgentBLABLABLA',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\t\n\t//console.log(res.body)\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.isError, false);\n\tassert.strictEqual(res.body.error, null);\n\tassert.strictEqual(res.body.status, 404);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "25f8d406-83ea-4b47-a7dc-f0fb4586ca27",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25f8d406-83ea-4b47-a7dc-f0fb4586ca27"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9beb20c9-f9d6-4561-b030-3f1f63290d8a",
        "title": "plugin-metrics",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bc819084-bcad-42c5-b205-f9e0b1400835",
            "title": "GET metrics getInfos",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics getInfos should return object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual( _.isArray(res.body.metrics) , true, 'body.metrics is not array')\t\t\n\t\t\t\tassert.strictEqual( res.body.metrics.length , 5, 'body.metrics length is not 5')\t\t\n\t\t\t\tlet cpuMetric =  res.body.metrics[0]\n\t\t\t\tassert.strictEqual( cpuMetric.name , 'cpu')\t\t\t\n\t\t\t\tassert.strictEqual( cpuMetric.url , 'http://'+HOST+':'+PORT+'/_plugin/metrics/cpu')\t\t\t\n\t\t\t\tassert.strictEqual( _.isArray(cpuMetric.args) , true, 'body.metrics[0].args is not array')\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "6ac5e440-73a6-48e1-9086-889b835e1865",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6ac5e440-73a6-48e1-9086-889b835e1865"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "600637a6-bb78-495d-a5f5-89571cdd699a",
            "title": "GET metrics systemInfo",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics systemInfo should return object",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/systemInfo') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.release == 'string', true, \"'release' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.uptime == 'number', true, \"'uptime' property is not number'\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.osType == 'string', true, \"'osType' property is not number'\")\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "9c1fd109-ef11-4083-9229-8850455bd4a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c1fd109-ef11-4083-9229-8850455bd4a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "87cd2bbc-e13c-40e1-a810-75f79d5665d5",
            "title": "GET metrics systemInfo format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics systemInfo format=nagios should return string",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/systemInfo?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, false, 0 )\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "4465b81f-5751-4c40-9556-153c8bb33741",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4465b81f-5751-4c40-9556-153c8bb33741"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0b49aefb-b172-429f-b45a-6fec8081aae9",
            "title": "GET metrics cpu",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics cpu should return object",
                "timedOut": false,
                "duration": 1005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.ellapsed == 'number', true, \"'ellapsed' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.percentageCPU == 'number', true, \"'percentageCPU' property is not number'\")\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "3bdb8cf3-4391-45cc-8ef0-e5217d50f9cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3bdb8cf3-4391-45cc-8ef0-e5217d50f9cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1005,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c1390e40-8b7c-44d7-aeb0-f52912058815",
            "title": "GET metrics cpu format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics cpu format=nagios should return string",
                "timedOut": false,
                "duration": 1016,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "f7a3cf8f-2a96-44a2-8bc4-0955e9aa2d1b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7a3cf8f-2a96-44a2-8bc4-0955e9aa2d1b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1016,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7d730a09-fec1-4353-aa27-e08f373cc2ba",
            "title": "GET metrics cpu warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics cpu warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=10&critic=5&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, false, 3 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "f1e79bb2-4c41-42fd-831a-ab7e514ab3ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f1e79bb2-4c41-42fd-831a-ab7e514ab3ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1005,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6498a941-2a7e-4989-b5c1-94703034aedb",
            "title": "GET metrics cpu warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics cpu warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 1006,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "bfde9e67-9639-4b6b-b8f5-ba4cae02a625",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bfde9e67-9639-4b6b-b8f5-ba4cae02a625"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1006,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2402dbce-854b-4b5b-a98c-66c03c9fef01",
            "title": "GET metrics cpu warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics cpu warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 1017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "5ec7ec28-66a3-4059-8d01-9fec15081046",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ec7ec28-66a3-4059-8d01-9fec15081046"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1017,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28ae82a3-9902-472a-bdff-2ec6fe151b4e",
            "title": "GET metrics memory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics memory should return object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.usedPercent == 'number', true, \"'usedPercent' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.usedMem == 'number', true, \"'usedMem' property is not number'\")\t\t\t\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.totalMem == 'number', true, \"'totalMem' property is not number'\")\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "d6bdeb1f-803a-44fe-95c8-df26e76ac3de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6bdeb1f-803a-44fe-95c8-df26e76ac3de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "91256ab0-9a18-4f2a-a332-7b06d0f89804",
            "title": "GET metrics memory format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics memory format=nagios should return string",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "f75b4acf-60d8-4c7d-8eb2-915e2423b69e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f75b4acf-60d8-4c7d-8eb2-915e2423b69e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8a7df775-b1a5-4dd1-91df-2a8a57c83c9c",
            "title": "GET metrics memory warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics memory warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8553545e-a558-4d23-b55a-73977e39ebf7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8553545e-a558-4d23-b55a-73977e39ebf7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e6ce3899-cffb-49f7-9b22-6d81c3f1f36f",
            "title": "GET metrics memory warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics memory warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "4e481300-70f7-4564-b6ef-428579b731d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e481300-70f7-4564-b6ef-428579b731d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "09be4590-5c1f-4e73-bdf4-4e5d897f3048",
            "title": "GET metrics memory warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics memory warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "229e0769-848b-4f17-87a2-cb48f4afc7bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "229e0769-848b-4f17-87a2-cb48f4afc7bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "be5785b3-6f59-421d-bd3e-acf52796e1fe",
            "title": "GET metrics load",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics load should return object",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.load1 == 'number', true, \"'load1' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.load5 == 'number', true, \"'load5' property is not number'\")\t\t\t\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.load15 == 'number', true, \"'load15' property is not number'\")\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "e456ba22-4aaa-42b2-bbc9-2c19a3ca9492",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e456ba22-4aaa-42b2-bbc9-2c19a3ca9492"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "db55bddc-2cf5-4702-959b-4cb1cfffe678",
            "title": "GET metrics load format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics load format=nagios should return string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "7896b9d7-3c95-42fe-a74d-4c6af6279393",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7896b9d7-3c95-42fe-a74d-4c6af6279393"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e7c907a1-9880-414a-a796-bc970b90fcea",
            "title": "GET metrics load warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "86e3a13b-844d-41f8-a85d-477ac56d7199",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86e3a13b-844d-41f8-a85d-477ac56d7199"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5ee31dd0-c511-4721-8019-362597576f42",
            "title": "GET metrics load warn1=10 critic1=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn1=10 critic1=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn1=10&critic1=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d632ac5f-8574-419d-a90d-e5d422057210",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d632ac5f-8574-419d-a90d-e5d422057210"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0fb0e3fd-4d88-4843-99ce-bdaefe6c2be1",
            "title": "GET metrics load warn5=10 critic5=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn5=10 critic5=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn5=10&critic5=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1312aed2-fcfa-4379-a2f8-f50e9373b89b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1312aed2-fcfa-4379-a2f8-f50e9373b89b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fe75912e-51cb-40ec-9878-6a35dc44c225",
            "title": "GET metrics load warn15=10 critic15=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn15=10 critic15=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn15=10&critic15=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "072a1986-6096-4f45-9796-e2d946b8bff5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "072a1986-6096-4f45-9796-e2d946b8bff5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e9d39a52-95ad-4544-9a11-3e99986dffcf",
            "title": "GET metrics load warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics load warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "91758d82-d1f8-45e0-b785-6ea8c00d78cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91758d82-d1f8-45e0-b785-6ea8c00d78cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "38da5d38-8774-482a-a1a5-d99b408d19c4",
            "title": "GET metrics load warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics load warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "047f2d91-1959-4bcb-9ea3-ea5e7e74ecd6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "047f2d91-1959-4bcb-9ea3-ea5e7e74ecd6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "598f047f-8166-4221-aba1-16c50d83fcb9",
            "title": "GET metrics disks",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics disks should return object",
                "timedOut": false,
                "duration": 626,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\t/*\n\t\t\t\t{\n\t\t\t\t\tC:: {\n\t\t\t\t\tname: \"C:\",\n\t\t\t\t\tfree: 5695320064,\n\t\t\t\t\ttotal: 128033222656,\n\t\t\t\t\tused: 122337902592,\n\t\t\t\t\ttotalGO: 119.2,\n\t\t\t\t\tusedGO: 113.9,\n\t\t\t\t\tfreeGO: 5.3,\n\t\t\t\t\tusedPercent: 96,\n\t\t\t\t\tisValid: true\n\t\t\t\t\t},\n\t\t\t\t*/\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "6af28f54-d0ce-4d14-897a-b993f6bbb8f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6af28f54-d0ce-4d14-897a-b993f6bbb8f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 626,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "37bd5360-7a3b-44f1-ae91-c10083d234a8",
            "title": "GET metrics disks format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics disks format=nagios should return string",
                "timedOut": false,
                "duration": 635,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "cc550c51-2dc9-47fa-9ce2-b18464b353e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc550c51-2dc9-47fa-9ce2-b18464b353e4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 635,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0b7e6cd2-7001-41c9-8098-d9193c3e04f0",
            "title": "GET metrics disks warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics disks warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 637,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "314a8465-37c5-418c-abde-aa6223437f56",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "314a8465-37c5-418c-abde-aa6223437f56"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 637,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8c4118f5-896c-44f2-a97c-0f6ca2008042",
            "title": "GET metrics disks fs=blablabla format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics disks fs=blablabla format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 873,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?fs=blablabla&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f53ecc84-6bff-439e-b787-aa06b7f667a6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f53ecc84-6bff-439e-b787-aa06b7f667a6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 873,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "48636d21-62f2-4421-9c12-0b8d10504c54",
            "title": "GET metrics disks warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics disks warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 785,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "ccfeb476-65fe-4f7d-9a44-60b5ab38991f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ccfeb476-65fe-4f7d-9a44-60b5ab38991f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 785,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "282dd9e8-5bb0-4e42-aa84-dad7f2bf1b1d",
            "title": "GET metrics disks warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics disks warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 766,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "24c3dae9-6dd7-4978-b619-cfd034b51e88",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24c3dae9-6dd7-4978-b619-cfd034b51e88"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 766,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "12a8d92c-553d-43fa-86b4-2d9ada2408eb",
        "title": "GET /_plugin/ssh",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 404",
            "fullTitle": "GET /_plugin/ssh should return 404",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let opt = getHttpOptions('GET', '/_plugin/ssh')\nexecRequestExpectError(opt, done, 404)",
            "err": {},
            "isRoot": false,
            "uuid": "cb0a9714-5b9b-46bf-a372-fade2c9227cf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cb0a9714-5b9b-46bf-a372-fade2c9227cf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a968e8ce-4f49-413a-af25-7d05842d1035",
        "title": "/_plugin/ssh/upload",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "546f871b-52b3-4db1-863e-9c1d2fa8a3d3",
            "title": "upload file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh/upload upload file should return 200",
                "timedOut": false,
                "duration": 1164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = '/tmp/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/ssh/upload?path='+path+'&port='+SSH_HOST_PORT+'&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD)\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        },\n        file2: {\n            value: fs.createReadStream(sourceDir+'/Application.js'),\n            options: {\n                filename: 'Application.js',\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\trequest( opt )\n\t.then( (res) => {\t\n\t\tcheckUploadResult( res, sourceFile, path  )\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "02ff63e6-7a4f-4996-83b3-d1bdd667d8da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02ff63e6-7a4f-4996-83b3-d1bdd667d8da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1164,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1ea4d927-ac5e-4b00-aa05-f04107648db0",
            "title": "upload file in incorrect path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh/upload upload file in incorrect path should return 400",
                "timedOut": false,
                "duration": 890,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = '/blablabla/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/ssh/upload?path='+path+'&port='+SSH_HOST_PORT+'&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD)\n\t\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    }\n\t\t\t\n\texecRequestExpectError( opt, done, 400 )",
                "err": {},
                "isRoot": false,
                "uuid": "442e3613-6e13-48c6-a039-0cfbcdb31ad0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "442e3613-6e13-48c6-a039-0cfbcdb31ad0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 890,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f7d094d0-a458-43ac-a4f7-3397439de963",
        "title": "/_plugin/ssh with password",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "40430c84-8368-4730-a0c6-67e53849549a",
            "title": "exec script on unknown host",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with password exec script on unknown host should return 500",
                "timedOut": false,
                "duration": 2254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: 'blablabla',\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-socket')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "a64d7552-6991-4719-9c69-1bdb89176e6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a64d7552-6991-4719-9c69-1bdb89176e6a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2254,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "1ca750b4-7f31-443f-8423-04cddba4dc16",
            "title": "exec script with incorrect password",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with password exec script with incorrect password should return 500",
                "timedOut": false,
                "duration": 1323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: 'blablabla'\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-authentication')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "188f9bb7-d712-4c6f-8a58-e3de6a9bbd17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "188f9bb7-d712-4c6f-8a58-e3de6a9bbd17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1323,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "04c60205-2af0-42cc-a9ee-e6c5a7571383",
            "title": "exec script",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with password exec script should return 200",
                "timedOut": false,
                "duration": 779,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"echo $USER\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stdout.trim(), SSH_HOST_USERNAME, 'stdout != '+SSH_HOST_USERNAME);\n\t\tassert.strictEqual(res.body.stderr, '', 'stderr is not empty');\n\t\tassert.strictEqual(res.body.exitCode, 0, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "b9c4a82b-f677-4ea0-9cf9-e4ce23953599",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b9c4a82b-f677-4ea0-9cf9-e4ce23953599"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 779,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9d2b1120-0825-4cba-b12e-948f4bef11e5",
            "title": "exec script with stderr and exitCode=1",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with password exec script with stderr and exitCode=1 should return 200",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"cd /blablabla\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stderr.trim() !== '', true, 'stderr is empty');\n\t\tassert.strictEqual(res.body.exitCode, 1, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "45169970-8657-4614-a172-61c20e38aa08",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45169970-8657-4614-a172-61c20e38aa08"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 121,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cbf8e1a4-e211-4f20-9235-c9ab559fc0c9",
        "title": "/_plugin/ssh sftpReaddir",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fb447768-301c-4841-9349-063869100a3c",
            "title": "sftpReaddir",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReaddir should return 200",
                "timedOut": false,
                "duration": 928,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t    \n\t\t    request( opt )\n\t\t\t.then( (res) => {\t\n\t\t\t\t\n\t\t\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(typeof res.body.result, 'object', 'result is not object');\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "ed1fc243-f3e2-4196-bdb4-49a6a344b8ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed1fc243-f3e2-4196-bdb4-49a6a344b8ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 928,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d5d9a164-310a-4167-81d4-2fb241d58e6c",
            "title": "sftpReadir with no path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReadir with no path should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t\n\t\t    execRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "f7868c13-6f05-4247-8893-c030ccf98c4b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7868c13-6f05-4247-8893-c030ccf98c4b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "253daa30-1793-4252-bf40-3477a99def45",
            "title": "sftpReadir with incorrect path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReadir with incorrect path should return 400",
                "timedOut": false,
                "duration": 850,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/dfgdfsgfdsgdsfg&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t\n\t\t    execRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "e6164635-91a1-4cc5-aead-e7177efc35dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e6164635-91a1-4cc5-aead-e7177efc35dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 850,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e875e3e1-62f6-405f-9a9f-0ca4175a6e90",
        "title": "/_plugin/ssh with remote key",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9efe996b-f5f4-46af-9a4d-1179e9f889be",
            "title": "exec script with incorrect passphrase",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with remote key exec script with incorrect passphrase should return 500",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: 'blablabla'\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-authentication')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "e60cda42-5e54-4807-a516-c81ab9c1dd2b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e60cda42-5e54-4807-a516-c81ab9c1dd2b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "322fec70-7275-44b3-b2f8-5e1bdf3850fe",
            "title": "exec script",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with remote key exec script should return 200",
                "timedOut": false,
                "duration": 875,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"echo $USER\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: SSH_HOST_PASSPHRASE\n\t}\n\t    \n    request( opt )\n\t.then( (res) => {\t\n\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stdout.trim(), SSH_HOST_USERNAME, 'stdout != '+SSH_HOST_USERNAME);\n\t\tassert.strictEqual(res.body.stderr, '', 'stderr is not empty');\n\t\tassert.strictEqual(res.body.exitCode, 0, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "846c90f1-0782-4161-8fe8-cf9a5806f922",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "846c90f1-0782-4161-8fe8-cf9a5806f922"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 875,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e257fbd6-0ae2-44c1-a1d6-3bda6b49072e",
            "title": "exec script with stderr and exitCode=1",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with remote key exec script with stderr and exitCode=1 should return 200",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"cd /blablabla\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: SSH_HOST_PASSPHRASE\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stderr.trim() !== '', true, 'stderr is empty');\n\t\tassert.strictEqual(res.body.exitCode, 1, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "d3c9e2f6-039b-41eb-9beb-d70d57a7876b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3c9e2f6-039b-41eb-9beb-d70d57a7876b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 90,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ff4dff6a-afb9-4042-b13d-c2959ea3b90a",
        "title": "/_plugin/ssh/download",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b8c641dd-c7db-41fd-aba0-aac4db8d8da7",
            "title": "download with password",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh/download download with password should return 200",
                "timedOut": false,
                "duration": 997,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp/upload.txt&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"upload.txt\"', 'Content-Disposition is not attachment');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ccd59d51-dad7-464d-9e03-e6496b45a135",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ccd59d51-dad7-464d-9e03-e6496b45a135"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 997,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4542ecb4-5669-4aea-b3f7-f3474322678f",
            "title": "download not existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh/download download not existing file should return 400",
                "timedOut": false,
                "duration": 871,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp/blablablaff.txt&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "b436d176-42c6-4393-8f68-e1e680e70bd2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b436d176-42c6-4393-8f68-e1e680e70bd2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 871,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bbe36074-1263-423d-82c2-4a45a06c1850",
            "title": "download directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh/download download directory should return 500",
                "timedOut": false,
                "duration": 918,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "818830de-0d96-48e8-abe0-8f8e46835468",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "818830de-0d96-48e8-abe0-8f8e46835468"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 918,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}