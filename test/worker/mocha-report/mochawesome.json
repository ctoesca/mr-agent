{
  "stats": {
    "suites": 123,
    "tests": 104,
    "passes": 98,
    "pending": 0,
    "failures": 6,
    "start": "2020-06-13T17:18:42.004Z",
    "end": "2020-06-13T17:19:24.479Z",
    "duration": 42475,
    "testsRegistered": 104,
    "passPercent": 94.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2479b709-c775-44c6-87f3-d837d0281d59",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ae84fc5e-cc2a-459b-a235-ee92a9755bf5",
        "title": "main-api",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2b3d6956-c913-4810-b55d-7325af959418",
            "title": "GET /api/checkAgent",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/checkAgent should return 200",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/checkAgent') )\n\t\t\t.then( (res) => {\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(res.body.status, 0);\n\t\t\t\tassert.strictEqual(typeof res.body.version, 'string');\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "9b318f06-79be-450f-b1ae-e64e5610c0ca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b318f06-79be-450f-b1ae-e64e5610c0ca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5ddf791b-370f-468e-a331-6cf95432b383",
            "title": "GET /api/checkPort",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/checkPort should return 200",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/checkPort?port='+PORT+'&host='+HOST) )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(res.body.result, true);\n\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "6e8b7b11-5d54-424b-8bae-7bd7af877aa6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e8b7b11-5d54-424b-8bae-7bd7af877aa6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b95be38e-d6a6-4532-9419-6916970f1e8e",
            "title": "GET /api/admin/os/cpus",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api GET /api/admin/os/cpus should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/api/admin/os/cpus') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body), true, 'body is array')\t\t\n\t\t\t\tassert.strictEqual(res.body.length > 0, true, 'result is empty')\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "946ec9e7-5072-453d-a5c5-e66e28d56583",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "946ec9e7-5072-453d-a5c5-e66e28d56583"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "04a32337-9e24-458a-8a62-1b5f557d3d7c",
            "title": "POST /api/getConfig",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api POST /api/getConfig should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('POST', '/api/getConfig') )\n.then( (res) => {\t\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.data, 'string');\n\tconfData = res.body.data\n\tdone()\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "00ec2cda-a061-4c23-b082-558ccfe42980",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00ec2cda-a061-4c23-b082-558ccfe42980"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e7f1fde0-5971-4c98-9ad2-f89f38b77423",
            "title": "POST /api/setConfig without data",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "main-api POST /api/setConfig without data should return 400",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {}\nexecRequestExpectError(updateOpt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "6334ae85-8362-4109-89d7-bbb678b1c861",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6334ae85-8362-4109-89d7-bbb678b1c861"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9476ee22-a33b-41d9-853a-d3f6c915819b",
            "title": "POST /api/setConfig without data.getConfig()",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "main-api POST /api/setConfig without data.getConfig() should return 400",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {\n\tdata: '{}'\n}\n\nexecRequestExpectError(updateOpt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "84078ec2-fe71-4f2a-a2a6-eb64960073da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84078ec2-fe71-4f2a-a2a6-eb64960073da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f226e95d-7a24-4e3f-9594-200e1887a4ba",
            "title": "POST /api/setConfig",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\10-main-api.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "main-api POST /api/setConfig should return 200",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let updateOpt = getHttpOptions('POST', '/api/setConfig')\t\t\t\t\nupdateOpt.body = {\n\tdata: confData\n}\n\nrequest( updateOpt )\n.then( (res) => {\t\n\t\n\texpect(res.statusCode).to.equal(200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.data, 'string');\n\tdone()\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7dfb3efc-05aa-4941-ba13-0eabe3dfe631",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7dfb3efc-05aa-4941-ba13-0eabe3dfe631"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "63a8d76a-9008-4a1f-980c-5df2530a872d",
        "title": "plugin-dns",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0a715532-df44-41c4-8d33-0b14597b0af1",
            "title": "GET /_plugin/dns/dnsReverse",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse should return 200",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=1.1.1.1') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '1.1.1.1')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, ['one.one.one.one'] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "afc2325b-1b74-4c37-9adf-a7c3c3092f9b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afc2325b-1b74-4c37-9adf-a7c3c3092f9b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bb68c9ac-64e3-4d7e-97af-46a49db0e75f",
            "title": "GET /_plugin/dns/dnsReverse",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse should return 200",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=1.1.1.1') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '1.1.1.1')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, ['one.one.one.one'] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "17fd69d0-50dc-435f-9e1a-b206afd456c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17fd69d0-50dc-435f-9e1a-b206afd456c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "daf2ad69-739d-43a9-a8c1-3570bc31244e",
            "title": "GET /_plugin/dns/dnsReverse (no result)",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-dns.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-dns GET /_plugin/dns/dnsReverse (no result) should return 200",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/dns/dnsReverse?ip=0.0.0.0') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tconsole.log(res.body)\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(res.body.ip, '0.0.0.0')\t\t\t\t\t\n\t\t\t\tassert.strictEqual(_.isArray(res.body.hostnames), true, 'hostnames is not array')\t\t\t\t\t\t\n\t\t\t\tassert.deepEqual(res.body.hostnames, [] )\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "62f39e9b-c214-4d81-8e2d-df728f4cf326",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "62f39e9b-c214-4d81-8e2d-df728f4cf326"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "282b3c98-e39f-45a2-bbe0-3394953b853e",
        "title": "GET /_plugin/filesystem",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 404",
            "fullTitle": "GET /_plugin/filesystem should return 404",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem')\nexecRequestExpectError(opt, done, 404)",
            "err": {},
            "isRoot": false,
            "uuid": "483fb013-cb60-43fa-bfbb-58ab96d70995",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "483fb013-cb60-43fa-bfbb-58ab96d70995"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "07e5db1c-4d7d-4186-b1e6-232fa61a96e2",
        "title": "/_plugin/filesystem/moveFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "00978a2d-0e83-4c59-bd38-471513861bc5",
            "title": "POST /moveFile no path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile no path should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let dest = tmpDir\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "d1b22452-fcc7-4305-86e8-64778ac5d1ba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d1b22452-fcc7-4305-86e8-64778ac5d1ba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "98befce7-9493-4081-8ebf-d4ae425ce23c",
            "title": "POST /moveFile no dest",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile no dest should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/testmove1.txt'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: path\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "5d6e14a7-9352-4211-b3e9-d52f4e574302",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d6e14a7-9352-4211-b3e9-d52f4e574302"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "dd89b153-e32c-44ba-b5c2-17e81f82cdc0",
            "title": "POST /moveFile to directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 - dest is directory",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile to directory should return 400 - dest is directory",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test-move1.txt'\nlet dest = tmpDir\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "8eb530f3-490b-4c37-91b9-155a5fa600b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8eb530f3-490b-4c37-91b9-155a5fa600b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "442b3037-7aa1-4c06-9ff3-68c4a7cf5832",
            "title": "POST /moveFile dest directory does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile dest directory does not exists should return error",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test-move1.txt'\nlet dest = tmpDir+'/blablabla/index.txt'\nif (fs.pathExistsSync(tmpDir+'/blablabla'))\n\tfs.unlinkSync(tmpDir+'/blablabla')\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "91fd093e-211b-448f-a0b0-8ebcdf7806c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91fd093e-211b-448f-a0b0-8ebcdf7806c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "010fa88b-50e6-4198-b44e-68128b741583",
            "title": "POST /moveFile path=\\\\localhost\\d$\\tmp/test.txt",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile path=\\\\localhost\\d$\\tmp/test.txt should return 200",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nif (fs.pathExistsSync(dest))\n\tfs.unlinkSync(dest)\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6a35ca30-f9b4-494f-b8f2-82644f622e6b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a35ca30-f9b4-494f-b8f2-82644f622e6b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fd7f0394-0e9c-4018-983b-1f7bd3bbe8d2",
            "title": "POST /moveFile - dest already exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile - dest already exists should return 400",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "4dd35c1b-3975-4e2e-a857-928cb31512c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4dd35c1b-3975-4e2e-a857-928cb31512c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "03bb0709-81f3-4544-9935-9db80267a100",
            "title": "POST /moveFile - dest already exists - overwrite=true",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile - dest already exists - overwrite=true should return 200",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/test.txt'\nlet dest = tmpDir+'/testMoved.txt'\nfs.writeFileSync(source, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest,\n\toverwrite: true\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "994a2029-4d61-4d5b-9fc4-be057bc1eaf3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "994a2029-4d61-4d5b-9fc4-be057bc1eaf3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "50097e42-ab14-4b61-a94e-0d8b90d9e959",
            "title": "POST /moveFile source is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200 - source is directory dest does not exists",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile source is directory should return 200 - source is directory dest does not exists",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/directoryToMove'\nfs.ensureDirSync(source)\nfs.writeFileSync(source+\"/test.txt\", 'test')\nlet dest = tmpDir+'/destDirectory1'\nif (fs.pathExistsSync(dest))\n\tfs.removeSync(dest)\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "12df01f3-fe54-4b42-8ca9-08fa97aeafd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12df01f3-fe54-4b42-8ca9-08fa97aeafd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 122,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4b72eb32-e66c-4d9c-bd43-c60dd446092b",
            "title": "POST /moveFile - source is directory - destination exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/moveFile POST /moveFile - source is directory - destination exists should return 400",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir+'/directoryToMove2'\n\t\t\tfs.ensureDirSync(source)\n\t\t\tfs.writeFileSync(source+\"/test.txt\", 'test')\n\t\t\tlet dest = tmpDir+'/destDirectory2'\n\t\t\tfs.ensureDirSync(dest)\n\t\t\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/moveFile')\n\t\t\topt.body = {\n\t\t\t\tpath: source,\n\t\t\t\tdest: dest\n\t\t\t}\n\t\t\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "f41ecb41-d206-4f94-9ddc-3554bf6f5d28",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f41ecb41-d206-4f94-9ddc-3554bf6f5d28"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9bb84b5d-5575-4032-addd-76b332a93e92",
        "title": "/_plugin/filesystem/copyFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4bba66db-006e-46f5-8289-298c32c5c7b8",
            "title": "POST /copyFile dest is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest is directory should return 400",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "3da30dda-1fb1-4b89-8ab9-bc8732e213db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3da30dda-1fb1-4b89-8ab9-bc8732e213db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7ee17d47-b0ec-4c7f-aa0e-9391a8c17de0",
            "title": "POST /copyFile dest already exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest already exists should return 200",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/index.txt'\nif (!fs.pathExistsSync(dest))\n\tfs.writeFileSync(dest, 'test')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\t\t\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0615e60b-8114-4307-a295-479a732b0e36",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0615e60b-8114-4307-a295-479a732b0e36"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e9998862-e264-4b58-939f-8a541a3fbe6a",
            "title": "POST /copyFile path does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile path does not exists should return error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceDir+'/blablabla'\nlet dest = tmpDir+'/blablabla'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "619056b0-49ca-4e40-92ef-f94c7dab1e55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "619056b0-49ca-4e40-92ef-f94c7dab1e55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1afceb77-dfce-4493-b20f-a38e71792043",
            "title": "POST /copyFile dest directory does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile dest directory does not exists should return 400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/blablabla/index.txt'\nif (fs.pathExistsSync(tmpDir+'/blablabla'))\n\tfs.removeSync(tmpDir+'/blablabla')\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "ab20576e-63cb-48d5-9603-96f67c9655f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab20576e-63cb-48d5-9603-96f67c9655f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "33ba76a3-852d-4b83-b053-3d6707675140",
            "title": "POST /copyFile path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = sourceFile\nlet dest = tmpDir+'/index.txt'\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "506c89d2-1a62-48ef-b20d-18094b2d8132",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "506c89d2-1a62-48ef-b20d-18094b2d8132"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0eabf280-11c3-494f-b9fb-44889c30dec1",
            "title": "POST /copyFile source is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error - source is directory",
                "fullTitle": "/_plugin/filesystem/copyFile POST /copyFile source is directory should return error - source is directory",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let source = tmpDir\nlet dest = tmpDir+'/testMoved.txt'\n\t\t\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/copyFile')\nopt.body = {\n\tpath: source,\n\tdest: dest\n}\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "1d9d53d8-d284-4238-9c10-87d6b0b218ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d9d53d8-d284-4238-9c10-87d6b0b218ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c8a88028-f1d5-487f-9035-0f56589eeb24",
        "title": "/_plugin/filesystem/fileinfo",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ac12b724-aaa5-40c9-9f52-26b2cffc8b12",
            "title": "GET /fileinfo path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo?path='+sourceFile)\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.name, 'index.js');\n\tassert.strictEqual(res.body.contentType.contains('application/javascript'), true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ab5edfb-d993-4ff7-9ad7-6a9457429ce0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ab5edfb-d993-4ff7-9ad7-6a9457429ce0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "86ef0b4c-aacb-4f42-bb7d-5be7b7422b9d",
            "title": "GET /fileinfo path=blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error 400",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo path=blablabla should return error 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo?path=blablabla')\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "23a70a1b-71e0-4fec-9cb3-b01d6c5f396e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "23a70a1b-71e0-4fec-9cb3-b01d6c5f396e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6f393dda-add1-4d2c-a948-b7ed6a7109bb",
            "title": "GET /fileinfo",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/fileinfo GET /fileinfo should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileinfo')\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "905148ff-792e-4a51-85ab-7c92e76327c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "905148ff-792e-4a51-85ab-7c92e76327c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b81ad260-ea97-4016-bf90-22c9922d251b",
        "title": "/_plugin/filesystem/fileExists",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e70a701c-cd9f-4433-b369-40d8fadcfbf9",
            "title": "GET /fileExists path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists path=D:\\projets\\mr-agent\\test\\worker/../../dist/index.js should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists?path='+sourceFile)\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, true);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "325df10f-b735-4d97-8b4e-197668ebae4e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "325df10f-b735-4d97-8b4e-197668ebae4e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "05ca8e25-55ca-42b0-8f00-22bdb14d2906",
            "title": "GET /fileExists path=blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists path=blablabla should return error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists?path=blablabla')\n\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.result, false);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "dc4d831d-d586-4549-9858-b2ce1ad3946f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dc4d831d-d586-4549-9858-b2ce1ad3946f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1f070762-2374-48d9-a60c-7978fef27c86",
            "title": "GET /fileExists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/filesystem/fileExists GET /fileExists should return 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('GET', '/_plugin/filesystem/fileExists')\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "aeed490d-b262-41cc-93f2-d2f3b455100e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aeed490d-b262-41cc-93f2-d2f3b455100e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7aa05aa3-f68e-4ac9-a6a1-f46d90c07c18",
        "title": "/_plugin/filesystem/execScript",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "522fd495-9e1f-42f7-b107-4dba5fc50fae",
            "title": "POST execScript type=shell",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=shell should return 200",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"dir\"\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.exitCode, 0);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bb6f22fb-15dc-4c9b-8e82-1d3bb46459d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb6f22fb-15dc-4c9b-8e82-1d3bb46459d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ab298fa1-1347-4acc-b127-c502d45927da",
            "title": "POST execScript type=blabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error 400",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=blabla should return error 400",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"dir\",\n\ttype: 'blabla'\n}\nexecRequestExpectError(opt, done, 412)",
                "err": {},
                "isRoot": false,
                "uuid": "e2adfa19-4857-4c94-b94f-0850a820b316",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e2adfa19-4857-4c94-b94f-0850a820b316"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bd7a7896-4a17-41d7-9016-1c8ce46df28c",
            "title": "POST execScript type=javascript with result",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with result should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"result = 2*2\",\n\ttype: 'javascript'\n}\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.stdout, 4);\n\tassert.strictEqual(res.body.exitCode, 0);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "329d6fe1-7124-4ed2-a476-d43f84a6fdc4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "329d6fe1-7124-4ed2-a476-d43f84a6fdc4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "15d74516-d555-4896-964b-1b052f79a8cf",
            "title": "POST execScript type=javascript with result && exitCode",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with result && exitCode should return 200",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"result = 2*2\\nexitCode=2\",\n\ttype: 'javascript'\n}\nrequest( opt )\n.then( (res) => {\t\n\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(res.body.stdout, 4);\n\tassert.strictEqual(res.body.exitCode, 2);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "093197fd-379f-411d-a5c8-d8e02db8f41b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "093197fd-379f-411d-a5c8-d8e02db8f41b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "dcd3939b-ca33-483d-8212-c3d447f2df13",
            "title": "POST execScript type=javascript with syntax error",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/filesystem/execScript POST execScript type=javascript with syntax error should return 500",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/execScript')\nopt.body = {\n\tscript: \"blabla\",\n\ttype: 'javascript'\n}\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "6de583df-1449-4ce5-8603-a390a7a7da0d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6de583df-1449-4ce5-8603-a390a7a7da0d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e3c1199-148d-4a9c-8f73-0a818c16ab87",
        "title": "/_plugin/filesystem/writeTextFile",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b19663b4-33b6-4a23-a59b-1f7dd5bc6114",
            "title": "POST /_plugin/filesystem/writeTextFile",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/writeTextFile POST /_plugin/filesystem/writeTextFile should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/writeTextFile')\n\t\t\topt.body = {\npath: tmpDir+\"/writeTextFile.txt\",\ncontent: 'test'\n\t\t\t}\n\n\t\t\trequest( opt )\n\t\t\t.then( (res) => {\t\n\t\t\nassert.strictEqual(res.statusCode, 200);\nassert.strictEqual(typeof res.body, 'object');\nassert.strictEqual(typeof res.body.path, 'string');\ndone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\ndone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "5be8463a-b192-4103-8a86-51b72d8ae1c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5be8463a-b192-4103-8a86-51b72d8ae1c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fde4b2f1-2d5b-4fc2-8200-a11911fd2560",
            "title": "POST writeTextFile, path does not exist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/filesystem/writeTextFile POST writeTextFile, path does not exist should return 500",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/writeTextFile')\n\t\t\topt.body = {\npath: tmpDir+\"/blabla/writeTextFile.txt\",\ncontent: 'test'\n\t\t\t}\n\n\t\t\texecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "65b4d9b3-06ad-4707-aa05-e1d68015d59d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "65b4d9b3-06ad-4707-aa05-e1d68015d59d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "27d7b46b-31cf-49ce-8026-54b8e5010692",
        "title": "/_plugin/filesystem/list",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "86f3d0b6-3c7f-453a-bba9-7086fd712762",
            "title": "GET path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 26);\n\tassert.strictEqual(res.body.files.length, 26);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "39c5896a-81a6-4014-b993-78bbb004a0b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "39c5896a-81a6-4014-b993-78bbb004a0b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "77e01ee5-1eb9-41b6-b70b-8f4a92246c1b",
            "title": "GET recursive=false&filter=*.map&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 5 .map files",
                "fullTitle": "/_plugin/filesystem/list GET recursive=false&filter=*.map&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return 5 .map files",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var query = 'recursive=false&filter=*.map&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 7);\n\tassert.strictEqual(res.body.files.length, 7);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4f1b07af-e2a8-483e-ac47-0faa7c2a9d34",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f1b07af-e2a8-483e-ac47-0faa7c2a9d34"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ba03a4e4-cd84-4cf8-9c4a-831636f09106",
            "title": "GET recursive=true&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 78,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var query = 'recursive=true&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 247);\n\tassert.strictEqual(res.body.files.length, 247);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n253 !== 247\n",
                  "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n253 !== 247\n\n    at request.then (D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js:672:12)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 253\n+ 247\n"
                },
                "isRoot": false,
                "uuid": "9736fa4f-6fcb-4bb9-b6e2-acf77a7f30c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "9736fa4f-6fcb-4bb9-b6e2-acf77a7f30c8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5235d276-481f-401f-8aff-1f7d136b583b",
            "title": "GET recursive=true&filter=*.js&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&filter=*.js&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 29,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var query = 'recursive=true&filter=*.js&path='+sourceDir\nrequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.files, 'object');\n\tassert.strictEqual(typeof res.body.files.push, 'function');\n\tassert.strictEqual(res.body.total, 74);\n\tassert.strictEqual(res.body.files.length, 74);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n76 !== 74\n",
                  "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n76 !== 74\n\n    at request.then (D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js:694:12)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 76\n+ 74\n"
                },
                "isRoot": false,
                "uuid": "44ee5f14-a75c-428a-8760-67054b9dbde9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "44ee5f14-a75c-428a-8760-67054b9dbde9"
            ],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "89315f02-c45d-4af0-84bc-084640f7d5fc",
            "title": "GET recursive=true&maxResults=10&filter=*.ts&path=D:\\projets\\mr-agent\\test\\worker/../../dist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return file list",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&maxResults=10&filter=*.ts&path=D:\\projets\\mr-agent\\test\\worker/../../dist should return file list",
                "timedOut": false,
                "duration": 25,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var query = 'recursive=true&maxResults=10&filter=*.ts&path='+sourceDir\n\trequest( getHttpOptions('GET', '/_plugin/filesystem/list?'+query) )\n\t.then( (res) => {\t\n\t\tassert.strictEqual(res.statusCode, 200);\n\t\tassert.strictEqual(typeof res.body, 'object');\n\t\tassert.strictEqual(typeof res.body.files, 'object');\n\t\tassert.strictEqual(typeof res.body.files.push, 'function');\n\t\tassert.strictEqual(res.body.total, 74);\n\t\tassert.strictEqual(res.body.files.length, 10);\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n76 !== 74\n",
                  "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n76 !== 74\n\n    at request.then (D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js:716:12)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 76\n+ 74\n"
                },
                "isRoot": false,
                "uuid": "e38aadb7-a249-4a51-9ef4-37726e679845",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "e38aadb7-a249-4a51-9ef4-37726e679845"
            ],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3221dbda-e9ba-47f0-aea1-0e85495927dd",
            "title": "GET recursive=true&path=/blablabla",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/list GET recursive=true&path=/blablabla should return error",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var query = 'recursive=true&path=/blablabla'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/list?'+query)\nexecRequestExpectError(opt, done, 500)",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: status is not 500",
                  "estack": "AssertionError [ERR_ASSERTION]: status is not 500\n    at assertHttpError (D:\\projets\\mr-agent\\test\\test-app.js:51:9)\n    at request.then (D:\\projets\\mr-agent\\test\\test-app.js:61:3)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 400\n+ 500\n"
                },
                "isRoot": false,
                "uuid": "d1bccb9a-c9de-4236-931d-ba67027b8bd9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "d1bccb9a-c9de-4236-931d-ba67027b8bd9"
            ],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5e53437f-e43a-47f1-86d2-6089f96659e7",
        "title": "/_plugin/filesystem/upload",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "42301281-290d-497d-839b-cf431d7c8c98",
            "title": "upload file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/upload upload file should return 200",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload.txt'\n\tif (fs.pathExistsSync(path))\n\t\tfs.unlinkSync(path)\n\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\n\topt.formData = {\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        path:path,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }/*,\n        file2: {\n            value: fs.createReadStream(sourceDir+'/Application.js'),\n            options: {\n                filename: 'Application.js',\n                contentType: 'application/javascript'\n            }\n        }*/\n    },\n\t\t\t\n\trequest( opt )\n\t.then( (res) => {\t\n\t\t\n\t\tassert.strictEqual(res.statusCode, 200);\n\t\tassert.strictEqual(typeof res.body, 'object', 'body is not object');\n\t\tassert.strictEqual(typeof res.body.file, 'object', 'body.file is not object');\t\t\t\t\n\t\tassert.strictEqual(res.body.path, path, 'body.path != '+path);\n\t\tassert.strictEqual(fs.pathExistsSync(path), true, 'uploaded file does not exists');\n\t\tassert.strictEqual(fs.statSync(path).size != 0, true, 'uploaded file size != 0');\n\t\t\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "75fbbc81-a58d-480f-a10c-aaee652aa0a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75fbbc81-a58d-480f-a10c-aaee652aa0a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bab3d1ae-8dd9-4303-b052-42b9d01fd784",
            "title": "upload no file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/upload upload no file should return error",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload2.txt'\n\tif (fs.pathExistsSync(path))\n\t\tfs.unlinkSync(path)\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\t\n\topt.formData = {\n        name: sourceFileName,\n        path:path,\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "fd2d2a18-3535-4c1f-acd9-0f48a71afaa1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd2d2a18-3535-4c1f-acd9-0f48a71afaa1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "990ed781-a228-4fa6-912c-caea863d347f",
            "title": "upload multi-files",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error 400",
                "fullTitle": "/_plugin/filesystem/upload upload multi-files should return error 400",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\t\n\tlet path = tmpDir+'/upload.txt'\n\tif (fs.pathExistsSync(path))\n\t\tfs.unlinkSync(path)\n\topt.formData = {\n        name: sourceFileName,\n        path:path,\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'text/plain'\n            }\n        },\n        file2: {\n            value: fs.createReadStream(sourceDir+'/Application.js'),\n            options: {\n                filename: 'Application.js',\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "2545a07b-2367-4369-941b-b614c7ff3c8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2545a07b-2367-4369-941b-b614c7ff3c8d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cba915ec-c889-4c1b-a78d-43c57bacc5e5",
            "title": "upload file - dest is directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 (dest is a directory)",
                "fullTitle": "/_plugin/filesystem/upload upload file - dest is directory should return 400 (dest is a directory)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\t\n\topt.formData = {\n\t\tpath:path,\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "a6568d8e-7fb0-4486-8cef-5130fc591231",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a6568d8e-7fb0-4486-8cef-5130fc591231"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fa2cc817-d953-4d8d-adb0-774d44253796",
            "title": "upload file - dest directory does not exist",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400 (dest a directory does not exist)",
                "fullTitle": "/_plugin/filesystem/upload upload file - dest directory does not exist should return 400 (dest a directory does not exist)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/uploadblablabla/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\t\n\topt.formData = {\n\t\tpath:path,\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "987bb1b9-2d36-413b-a28e-3b918aff5f6b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "987bb1b9-2d36-413b-a28e-3b918aff5f6b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b31c8c29-3f50-458c-9090-e580f46c864e",
            "title": "upload existing file - overwrite=false",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return error",
                "fullTitle": "/_plugin/filesystem/upload upload existing file - overwrite=false should return error",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/upload.txt'\n\tfs.ensureFileSync(path)\n\tlet opt = getHttpOptions('POST', '/_plugin/filesystem/upload')\n\t\n\topt.formData = {\n\t\toverwrite: 'false',\n\t\tpath:path,\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    },\n\t\t\t\n\texecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "d49cb2e5-4fc1-4202-90fc-85c95e6b33f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d49cb2e5-4fc1-4202-90fc-85c95e6b33f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b6fb04a0-d8e2-407f-966b-84df0bd51768",
        "title": "/_plugin/filesystem/deleteFiles",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "54bb8e30-2df6-45e6-ba3f-be40e1875ebd",
            "title": "delete existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/deleteFiles delete existing file should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/fileToDelete.txt'\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/deleteFiles')\nopt.body = {\n\tpath: path\n}\nfs.writeFileSync(path, 'test')\n\t\t\nrequest( opt )\n.then( (res) => {\t\n\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(fs.pathExistsSync(path), false);\n\tassert.strictEqual(typeof res.body.filename, 'string');\n\tassert.strictEqual(res.body.path, path);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3fad4611-3d65-4323-9c8e-a3c21a779e45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3fad4611-3d65-4323-9c8e-a3c21a779e45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8d69ce14-4c72-4f4c-bccd-aa580edcdcf9",
            "title": "delete existing directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/deleteFiles delete existing directory should return 200",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/directoryToDelete'\nfs.mkdirpSync(path)\nfs.writeFileSync(path+\"/test1.txt\", 'test')\nfs.writeFileSync(path+\"/test2.txt\", 'test')\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/deleteFiles')\nopt.body = {\n\tpath: path\n}\nrequest( opt )\n.then( (res) => {\t\n\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(fs.pathExistsSync(path), false);\n\tassert.strictEqual(typeof res.body.filename, 'string');\n\tassert.strictEqual(res.body.path, path);\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1736222d-c121-4e9d-ae83-ea762fbe55f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1736222d-c121-4e9d-ae83-ea762fbe55f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0fd37812-212f-4774-ac8d-5d1bb38c7904",
            "title": "delete not existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 404",
                "fullTitle": "/_plugin/filesystem/deleteFiles delete not existing file should return 404",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = tmpDir+'/fileToDelete.txt'\n\nlet opt = getHttpOptions('POST', '/_plugin/filesystem/deleteFiles')\nopt.body = {\n\tpath: path\n}\nif (fs.pathExistsSync(path))\n\tfs.unlinkSync(path)\n\t\t\nexecRequestExpectError(opt, done, 404)",
                "err": {},
                "isRoot": false,
                "uuid": "df4a95a0-d5fb-445b-852f-d1113f893d64",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df4a95a0-d5fb-445b-852f-d1113f893d64"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ccaae073-5f17-41c6-894f-14e37dbbcf1a",
        "title": "/_plugin/filesystem/download",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7de9cdeb-a5ae-4bcc-b859-6b8d4154518e",
            "title": "Download existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download existing file should return 200",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\tassert.strictEqual(res.headers['content-type'], 'application/javascript; charset=UTF-8');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"index.js\"');\n\tassert.strictEqual(res.headers['content-length'] > 0 , true, 'content-type > 0');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5475e95b-4923-4289-afe0-f467f4bac754",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5475e95b-4923-4289-afe0-f467f4bac754"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6f952fb5-c687-4038-81e8-7e634c2ca81f",
            "title": "Download existing file - compress=false",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download existing file - compress=false should return 200",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile+'&compress=false'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nrequest( opt )\n.then( (res) => {\t\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\t/*assert.strictEqual(res.headers['content-type'], 'application/javascript');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"index.js\"');*/\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "16d8698a-aaf2-458b-ac29-d3e4d3192a99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16d8698a-aaf2-458b-ac29-d3e4d3192a99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cf2b0b6d-ecb9-4fd6-a640-95a8f7b8d77c",
            "title": "Download file - file does not exists",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 404",
                "fullTitle": "/_plugin/filesystem/download Download file - file does not exists should return 404",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceFile+'/balbalba'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nexecRequestExpectError(opt, done, 404)",
                "err": {},
                "isRoot": false,
                "uuid": "6a85f5fb-432c-4d38-b5ac-e0b8b883fbdf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a85f5fb-432c-4d38-b5ac-e0b8b883fbdf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8e8fa79e-2265-45de-8493-2168f4429c90",
            "title": "Download directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\20-plugin-filesystem.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/filesystem/download Download directory should return 200",
                "timedOut": false,
                "duration": 798,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = 'path='+sourceDir\nlet dest = tmpDir+'/downloadZip.zip'\nlet opt = getHttpOptions('GET', '/_plugin/filesystem/download?'+query)\nopt.json = false\nif (fs.pathExistsSync(dest))\n\tfs.unlinkSync(dest)\nlet destFileStream = fs.createWriteStream(dest);\nrequest( opt , (error, res, body) => {\n\tassert.strictEqual(res.statusCode, 200);\n\tassert.strictEqual(typeof res.body, 'string');\n\tassert.strictEqual(res.headers['content-type'], 'application/zip');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"dist.zip\"');\t\t\n})\n.pipe(destFileStream)\n\t\t    .on('finish', () => {\n\n\t\t    \tif (fs.pathExistsSync(dest) && (fs.statSync(dest).size > 0))\n\t\t       \t\tdone();\t\t \t      \n\t\t       \telse\n\t\t       \t\tdone('Downloaded file does not exists or is empty');\t\t \t      \n\t\t    })\n\t\t    .on('error', (error) => {\n\t\t        done(error);\n\t\t    })",
                "err": {},
                "isRoot": false,
                "uuid": "81f7d862-22e4-4766-b06d-10e164102f79",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81f7d862-22e4-4766-b06d-10e164102f79"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 798,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6fd6c5b0-a254-4d22-bd9e-25b8960c3b8b",
        "title": "plugin-http",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3799ffa-e78f-4472-b323-c7eb833707ba",
            "title": "POST /_plugin/http/request",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "plugin-http POST /_plugin/http/request should return 200",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+':'+PORT+'/api/checkAgent',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\n\t\n\tcheckHttpResult(res, 200)\t\t\n\tvar bodyObject = JSON.parse( Buffer.from(res.body.body, 'base64').toString())\n\tassert.strictEqual(typeof bodyObject, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b8c1c3f9-be40-4e32-949a-09caa8b13374",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b8c1c3f9-be40-4e32-949a-09caa8b13374"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d9369509-384b-4046-bcde-6e1854e675fe",
            "title": "POST /_plugin/http/request to unkown host",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200 - content is error",
                "fullTitle": "plugin-http POST /_plugin/http/request to unkown host should return 200 - content is error",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+'blablabla:'+PORT+'/api/checkAgent',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\t\n\t\n\tassert.strictEqual(typeof res.body, 'object');\n\tassert.strictEqual(typeof res.body.err, 'object');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2510a332-46a7-4047-9fa8-a6b956cdc93f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2510a332-46a7-4047-9fa8-a6b956cdc93f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5eecc5f0-1563-46b2-880b-20c72e89d56f",
            "title": "POST /_plugin/http/request to unkown url",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\30-plugin-http.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200 - content is error 404",
                "fullTitle": "plugin-http POST /_plugin/http/request to unkown url should return 200 - content is error 404",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/http/request')\nopt.body = {\n\turl: 'http://'+HOST+':'+PORT+'/api/checkAgentBLABLABLA',\n\tmethod: 'GET',\n\tjson: true\n}\nrequest( opt )\n.then( (res) => {\t\t\n\t//console.log(res.body)\t\n\tcheckHttpResult(res, 200, 404)\n\tdone()\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f5500bfd-ad73-454a-adfb-48dc9d13e60d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5500bfd-ad73-454a-adfb-48dc9d13e60d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4af93758-f229-4f46-8b02-b93d73a50dfd",
        "title": "plugin-metrics",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "93a3bf06-619e-4d02-bd82-abbc71b0d5de",
            "title": "GET metrics getInfos",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics getInfos should return object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual( _.isArray(res.body.metrics) , true, 'body.metrics is not array')\t\t\n\t\t\t\tassert.strictEqual( res.body.metrics.length , 5, 'body.metrics length is not 5')\t\t\n\t\t\t\tlet cpuMetric =  res.body.metrics[0]\n\t\t\t\tassert.strictEqual( cpuMetric.name , 'cpu')\t\t\t\n\t\t\t\tassert.strictEqual( cpuMetric.url , 'http://'+HOST+':'+PORT+'/_plugin/metrics/cpu')\t\t\t\n\t\t\t\tassert.strictEqual( _.isArray(cpuMetric.args) , true, 'body.metrics[0].args is not array')\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "7dedde00-5429-4cbe-9b3c-6fa7db60ff3a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7dedde00-5429-4cbe-9b3c-6fa7db60ff3a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e7ee7e55-c847-489c-9181-bd8c70a99bd3",
            "title": "GET metrics systemInfo",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics systemInfo should return object",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/systemInfo') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.release == 'string', true, \"'release' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.uptime == 'number', true, \"'uptime' property is not number'\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.osType == 'string', true, \"'osType' property is not number'\")\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "0a472a3f-964b-4cb9-b031-aa1214324f34",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a472a3f-964b-4cb9-b031-aa1214324f34"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6d372cd3-cfd3-4be8-925a-fa4c6aec049b",
            "title": "GET metrics systemInfo format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics systemInfo format=nagios should return string",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/systemInfo?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, false, 0 )\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "c023447e-c939-4b9e-b95f-c34291295319",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c023447e-c939-4b9e-b95f-c34291295319"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3261be4b-3b19-48df-a5e2-b46f71a16615",
            "title": "GET metrics cpu",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics cpu should return object",
                "timedOut": false,
                "duration": 5011,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.ellapsed == 'number', true, \"'ellapsed' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.percentageCPU == 'number', true, \"'percentageCPU' property is not number'\")\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "7dba86cd-6d75-4bad-a1a6-a124f8516e09",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7dba86cd-6d75-4bad-a1a6-a124f8516e09"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5011,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b2710187-fe97-4693-a2be-b9e78447a14f",
            "title": "GET metrics cpu format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics cpu format=nagios should return string",
                "timedOut": false,
                "duration": 5007,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "410c3d6c-87ec-4ac1-9926-ddf1d4b2375f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "410c3d6c-87ec-4ac1-9926-ddf1d4b2375f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5007,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e0734a74-8d6c-4667-901a-cfb6a54e1b8e",
            "title": "GET metrics cpu warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics cpu warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 5007,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=10&critic=5&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, false, 3 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "38f37424-a454-4d2c-99a0-502e60c44675",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38f37424-a454-4d2c-99a0-502e60c44675"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5007,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "04aed880-bb25-4b34-8764-8fc04db66226",
            "title": "GET metrics cpu warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics cpu warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 5007,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "75491e1c-826c-44b9-8cc9-745f4b1bdc8f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75491e1c-826c-44b9-8cc9-745f4b1bdc8f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5007,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1482eb13-c76c-4231-98c7-4e14ed96faa0",
            "title": "GET metrics cpu warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics cpu warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 5017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/cpu?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "98491a47-dd7a-42b0-849d-bc04251d82b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98491a47-dd7a-42b0-849d-bc04251d82b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5017,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "183affe6-64e9-4f17-8792-8c5f6b87d173",
            "title": "GET metrics memory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics memory should return object",
                "timedOut": false,
                "duration": 752,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory == 'object', true, \"'memory' property is not object\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory.actual == 'object', true, \"'memory.actual' property is not object'\")\t\t\t\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory.swap == 'object', true, \"'memory.swap' property is not object'\")\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory.used == 'object', true, \"'memory.used' property is not object'\")\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory.total == 'number', true, \"'memory.total' property is not number'\")\t\t\t\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.memory.free == 'number', true, \"'memory.free' property is not number'\")\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "8cb918be-8267-43e4-b0fc-cd6fd4075f9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8cb918be-8267-43e4-b0fc-cd6fd4075f9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 752,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "572c1e27-aa5d-4929-b899-1e867e5ad856",
            "title": "GET metrics memory format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics memory format=nagios should return string",
                "timedOut": false,
                "duration": 721,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "595c5daa-6d71-4f0e-970f-41e63225d41a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "595c5daa-6d71-4f0e-970f-41e63225d41a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 721,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28f8a814-6195-4e11-b059-35a225166139",
            "title": "GET metrics memory warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics memory warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 791,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d60566e8-a66c-4f67-b56e-af0504551f5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d60566e8-a66c-4f67-b56e-af0504551f5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 791,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "07de4c1a-4d4a-4174-8429-d5fdc65692be",
            "title": "GET metrics memory warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics memory warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 832,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: currentState != 2",
                  "estack": "AssertionError [ERR_ASSERTION]: currentState != 2\n    at checkNagiosResult (D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js:18:10)\n    at request.then (D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js:268:5)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 0\n+ 2\n"
                },
                "isRoot": false,
                "uuid": "28c219e8-8730-48b6-b995-fe628a08a2fc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "28c219e8-8730-48b6-b995-fe628a08a2fc"
            ],
            "pending": [],
            "skipped": [],
            "duration": 832,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7fadf028-c622-4305-bf0c-0b37b50bc4fc",
            "title": "GET metrics memory warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics memory warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 842,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/memory?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {
                  "message": "AssertionError [ERR_ASSERTION]: currentState != 1",
                  "estack": "AssertionError [ERR_ASSERTION]: currentState != 1\n    at checkNagiosResult (D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js:18:10)\n    at request.then (D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js:283:5)\n    at tryCatcher (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\n    at _drainQueueStep (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:138:12)\n    at _drainQueue (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:131:9)\n    at Async._drainQueues (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (D:\\projets\\mr-agent\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at processImmediate (internal/timers.js:443:21)",
                  "diff": "- 0\n+ 1\n"
                },
                "isRoot": false,
                "uuid": "1a491673-b4a4-4009-9fe6-5e460f38c4f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "1a491673-b4a4-4009-9fe6-5e460f38c4f0"
            ],
            "pending": [],
            "skipped": [],
            "duration": 842,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6947193a-f28c-44b6-ba07-b2630f8e3859",
            "title": "GET metrics load",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics load should return object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\tassert.strictEqual(typeof res.body.load1 == 'number', true, \"'load1' property is not number\")\t\n\t\t\t\tassert.strictEqual(typeof res.body.load5 == 'number', true, \"'load5' property is not number'\")\t\t\t\t\t\n\t\t\t\tassert.strictEqual(typeof res.body.load15 == 'number', true, \"'load15' property is not number'\")\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "86c3125f-3d52-494c-a601-ded1787102a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86c3125f-3d52-494c-a601-ded1787102a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9a0ce542-3c55-45a1-8aba-8c5bc111fe4c",
            "title": "GET metrics load format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics load format=nagios should return string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "ad167fc1-d743-45ca-b081-4c1e198187f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad167fc1-d743-45ca-b081-4c1e198187f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e6951489-7eb4-49dd-840d-c5f7d78f3c42",
            "title": "GET metrics load warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5df436a5-702f-440f-b421-80183e04325e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5df436a5-702f-440f-b421-80183e04325e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "267f1bad-88b7-42f7-984b-378fadb02255",
            "title": "GET metrics load warn1=10 critic1=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn1=10 critic1=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn1=10&critic1=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "35617ef7-1bfe-43bd-a1a7-02bed8f9c7ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35617ef7-1bfe-43bd-a1a7-02bed8f9c7ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b7379b7e-00bb-452b-8183-b9f37b2226d6",
            "title": "GET metrics load warn5=10 critic5=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn5=10 critic5=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn5=10&critic5=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "276df97c-727e-44d2-a5ea-237f57f89235",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "276df97c-727e-44d2-a5ea-237f57f89235"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f67d68c4-96ba-48af-964b-1646d801c2bf",
            "title": "GET metrics load warn15=10 critic15=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics load warn15=10 critic15=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn15=10&critic15=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c8c0744e-f220-4842-8157-7edf033b46a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8c0744e-f220-4842-8157-7edf033b46a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ee51fe07-b005-4167-88cd-5d1c190494d1",
            "title": "GET metrics load warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics load warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "c4f004b9-8eda-4a59-b94e-9958c57e99c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c4f004b9-8eda-4a59-b94e-9958c57e99c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "52ba5702-34de-4f57-95c5-55720eb9072f",
            "title": "GET metrics load warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics load warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/load?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "a91ffdac-9dbe-44b0-b2ee-969b5dd36794",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a91ffdac-9dbe-44b0-b2ee-969b5dd36794"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "afb4ea05-45b5-4ed0-9e78-3d8545420b15",
            "title": "GET metrics disks",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return object",
                "fullTitle": "plugin-metrics GET metrics disks should return object",
                "timedOut": false,
                "duration": 721,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\n\t\t\t\texpect(res.statusCode).to.equal(200);\n\t\t\t\tassert.strictEqual(typeof res.body, 'object')\t\n\t\t\t\t/*\n\t\t\t\t{\n\t\t\t\t\tC:: {\n\t\t\t\t\tname: \"C:\",\n\t\t\t\t\tfree: 5695320064,\n\t\t\t\t\ttotal: 128033222656,\n\t\t\t\t\tused: 122337902592,\n\t\t\t\t\ttotalGO: 119.2,\n\t\t\t\t\tusedGO: 113.9,\n\t\t\t\t\tfreeGO: 5.3,\n\t\t\t\t\tusedPercent: 96,\n\t\t\t\t\tisValid: true\n\t\t\t\t\t},\n\t\t\t\t*/\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "a74efe00-cee2-41db-9fe9-0f35d2fb4fde",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a74efe00-cee2-41db-9fe9-0f35d2fb4fde"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 721,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7d64f898-a26e-4413-be67-ddeae1d044c0",
            "title": "GET metrics disks format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return string",
                "fullTitle": "plugin-metrics GET metrics disks format=nagios should return string",
                "timedOut": false,
                "duration": 778,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\t\n\t\t\t\tcheckNagiosResult( res, true )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "fe3cacbc-772c-4f8a-82d0-c6962d967e1b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe3cacbc-772c-4f8a-82d0-c6962d967e1b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 778,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b6ab1093-74d5-474d-9001-c12f06c6f21d",
            "title": "GET metrics disks warn=10 critic=5 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics disks warn=10 critic=5 format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 894,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=10&critic=5&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a6107b8b-6b1e-437d-b5b7-2203f2fbe591",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a6107b8b-6b1e-437d-b5b7-2203f2fbe591"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 894,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "be06752a-326c-44b8-a534-f954499ee57b",
            "title": "GET metrics disks fs=blablabla format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 3",
                "fullTitle": "plugin-metrics GET metrics disks fs=blablabla format=nagios should return currentState 3",
                "timedOut": false,
                "duration": 700,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?fs=blablabla&format=nagios') )\n.then( (res) => {\t\t\n\tcheckNagiosResult( res, false, 3)\t\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e4dd6ef8-3e9d-4705-9927-91d9451b268d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e4dd6ef8-3e9d-4705-9927-91d9451b268d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 700,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d03f503f-7cb1-4b30-a8a7-c9dbbdabb131",
            "title": "GET metrics disks warn=0 critic=0 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 2",
                "fullTitle": "plugin-metrics GET metrics disks warn=0 critic=0 format=nagios should return currentState 2",
                "timedOut": false,
                "duration": 715,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=0&critic=0&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 2 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "b3d64035-fa04-4449-9b9d-a084f984413a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b3d64035-fa04-4449-9b9d-a084f984413a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 715,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "081fb14c-aa46-4635-9fcb-97ac82732f41",
            "title": "GET metrics disks warn=0 critic=100 format=nagios",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\40-plugin-metrics.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return currentState 1",
                "fullTitle": "plugin-metrics GET metrics disks warn=0 critic=100 format=nagios should return currentState 1",
                "timedOut": false,
                "duration": 860,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request( getHttpOptions('GET', '/_plugin/metrics/disks?warn=0&critic=100&format=nagios') )\n\t\t\t.then( (res) => {\t\t\n\t\t\t\tcheckNagiosResult( res, true, 1 )\t\t\t\t\t\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "dd21f696-1147-4530-b080-a6988d8170a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd21f696-1147-4530-b080-a6988d8170a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 860,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9f051eaa-458d-488d-84f3-57c437a84ffa",
        "title": "GET /_plugin/ssh",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 404",
            "fullTitle": "GET /_plugin/ssh should return 404",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let opt = getHttpOptions('GET', '/_plugin/ssh')\nexecRequestExpectError(opt, done, 404)",
            "err": {},
            "isRoot": false,
            "uuid": "5f2d3be0-722b-48d1-9c60-3cf5f097c64f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5f2d3be0-722b-48d1-9c60-3cf5f097c64f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ca4d919c-e4dc-4ec1-b73c-b9648f98f0ba",
        "title": "/_plugin/ssh/upload",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8bf8c0ff-d18a-4129-91f3-3fb7ce626c23",
            "title": "upload file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh/upload upload file should return 200",
                "timedOut": false,
                "duration": 984,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = '/tmp/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/ssh/upload')\n\t\n\topt.formData = {\n\t\tpath: path,\n\t\tport: SSH_HOST_PORT,\n\t\thost: SSH_HOST,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD,\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n        /*,\n        file2: {\n            value: fs.createReadStream(sourceDir+'/Application.js'),\n            options: {\n                filename: 'Application.js',\n                contentType: 'application/javascript'\n            }\n        }*/\n    },\n\t\t\t\n\trequest( opt )\n\t.then( (res) => {\t\n\t\tcheckUploadResult( res, sourceFile, path  )\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "e3be812d-c5dd-4da4-9956-22d16a42a534",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3be812d-c5dd-4da4-9956-22d16a42a534"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 984,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a3176a45-d5e4-4527-ab6e-854299268c17",
            "title": "upload file in incorrect path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh/upload upload file in incorrect path should return 400",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let path = '/blablabla/upload.txt'\n\tlet opt = getHttpOptions('POST', '/_plugin/ssh/upload')\n\t\n\topt.formData = {\n\t\tpath: path,\n\t\tport: SSH_HOST_PORT,\n\t\thost: SSH_HOST,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD,\n        // Like <input type=\"text\" name=\"name\">\n        name: sourceFileName,\n        // Like <input type=\"file\" name=\"file\">\n        file1: {\n            value: fs.createReadStream(sourceFile),\n            options: {\n                filename: sourceFileName,\n                contentType: 'application/javascript'\n            }\n        }\n    }\n\t\t\t\n\texecRequestExpectError( opt, done, 400 )",
                "err": {},
                "isRoot": false,
                "uuid": "8308ab8b-911f-47b6-ad41-c828d768ce61",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8308ab8b-911f-47b6-ad41-c828d768ce61"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 105,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "725be050-5402-471f-a782-32ac45fadaec",
        "title": "/_plugin/ssh with password",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "af56cafc-45d1-4f2e-bd29-5edef4ac89ba",
            "title": "exec script on unknown host",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with password exec script on unknown host should return 500",
                "timedOut": false,
                "duration": 2256,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: 'blablabla',\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-socket')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "0370756d-dffb-4e90-9aa6-15a6d99dcaab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0370756d-dffb-4e90-9aa6-15a6d99dcaab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2256,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "d00dfb97-0088-40e3-b9f6-241a75155f1c",
            "title": "exec script with incorrect password",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with password exec script with incorrect password should return 500",
                "timedOut": false,
                "duration": 2005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: 'blablabla'\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-authentication')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "1afbfa35-cf4d-459b-a125-52f8f239b76b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1afbfa35-cf4d-459b-a125-52f8f239b76b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2005,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "1c059757-ca89-4d16-8bdc-62468b939e73",
            "title": "exec script",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with password exec script should return 200",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"echo $USER\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stdout.trim(), SSH_HOST_USERNAME, 'stdout != '+SSH_HOST_USERNAME);\n\t\tassert.strictEqual(res.body.stderr, '', 'stderr is not empty');\n\t\tassert.strictEqual(res.body.exitCode, 0, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "034808de-cf1e-40ae-8282-c2f157925318",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "034808de-cf1e-40ae-8282-c2f157925318"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a310154b-340d-47d0-bf74-99ea92efe7f0",
            "title": "exec script with stderr and exitCode=1",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with password exec script with stderr and exitCode=1 should return 200",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"cd /blablabla\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassword: SSH_HOST_PASSWORD\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stderr.trim() !== '', true, 'stderr is empty');\n\t\tassert.strictEqual(res.body.exitCode, 1, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "51a79d6f-3495-4fb0-a40b-75db45d10707",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51a79d6f-3495-4fb0-a40b-75db45d10707"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b58b4c9a-03a5-4bf3-b2a8-83b933d77c08",
        "title": "/_plugin/ssh sftpReaddir",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a98d4269-141d-4a02-b7eb-869fdacd8e3c",
            "title": "sftpReaddir",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReaddir should return 200",
                "timedOut": false,
                "duration": 222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t    \n\t\t    request( opt )\n\t\t\t.then( (res) => {\t\n\t\t\t\t\n\t\t\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\t\t\tassert.strictEqual(typeof res.body, 'object');\n\t\t\t\tassert.strictEqual(typeof res.body.result, 'object', 'result is not object');\n\t\t\t\tdone();\t\t\t\t\n\t\t\t})\n\t\t\t.catch( err => {\n\t\t\t\tdone(err)\n\t\t\t})",
                "err": {},
                "isRoot": false,
                "uuid": "04f678d4-44a2-4f54-8a87-ce4910f52c39",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04f678d4-44a2-4f54-8a87-ce4910f52c39"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 222,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b3db5874-c928-4f80-8c89-cb54767dcd63",
            "title": "sftpReadir with no path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReadir with no path should return 400",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t\n\t\t    execRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "d58ce6f0-16e4-42e6-b2fd-5e8476440f36",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d58ce6f0-16e4-42e6-b2fd-5e8476440f36"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b70d581e-8e16-4a1f-8079-77ab40151823",
            "title": "sftpReadir with incorrect path",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh sftpReaddir sftpReadir with incorrect path should return 400",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/dfgdfsgfdsgdsfg&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\n\t\t\tlet opt = getHttpOptions('GET', '/_plugin/ssh/sftpReaddir?'+params)\n\t\t\t\n\t\t    execRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "3b6d4acf-db1e-407f-b1ef-d8a02ec589f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3b6d4acf-db1e-407f-b1ef-d8a02ec589f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 89,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ee232a12-49f0-4eca-a356-012e983ec402",
        "title": "/_plugin/ssh with remote key",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cbcd0845-1ef6-4e19-8941-46bc9a7a770e",
            "title": "exec script with incorrect passphrase",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh with remote key exec script with incorrect passphrase should return 500",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"ls -l\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: 'blablabla'\n\t}\n    \n\texecRequestExpectError(opt, null, 500)\n\t.then( res => {\n\t\tcheckSshError(res, 'SshError', false, 'client-authentication')\n\t\tdone()\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "9afaca0d-fff6-4c1e-a699-8a71a951aa87",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9afaca0d-fff6-4c1e-a699-8a71a951aa87"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 25000
          },
          {
            "uuid": "76adad03-b344-4ac5-91a4-9be127f4b920",
            "title": "exec script",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with remote key exec script should return 200",
                "timedOut": false,
                "duration": 832,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"echo $USER\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: SSH_HOST_PASSPHRASE\n\t}\n\t    \n    request( opt )\n\t.then( (res) => {\t\n\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stdout.trim(), SSH_HOST_USERNAME, 'stdout != '+SSH_HOST_USERNAME);\n\t\tassert.strictEqual(res.body.stderr, '', 'stderr is not empty');\n\t\tassert.strictEqual(res.body.exitCode, 0, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "e29ce7d8-dc09-416d-bd25-4a680be4d361",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e29ce7d8-dc09-416d-bd25-4a680be4d361"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 832,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8174f0d1-399f-4432-bd89-a29573ea1004",
            "title": "exec script with stderr and exitCode=1",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh with remote key exec script with stderr and exitCode=1 should return 200",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let opt = getHttpOptions('POST', '/_plugin/ssh/exec')\n\t\n\topt.body = {\n\t\tscript:  \"cd /blablabla\",\n\t\thost: SSH_HOST,\n\t\tport: SSH_HOST_PORT,\n\t\tusername: SSH_HOST_USERNAME,\n\t\tpassphrase: SSH_HOST_PASSPHRASE\n\t}\n    \n    request( opt )\n\t.then( (res) => {\t\n\t\n\t\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\t\tassert.strictEqual(res.body.stderr.trim() !== '', true, 'stderr is empty');\n\t\tassert.strictEqual(res.body.exitCode, 1, 'exitCode != 0');\n\t\tdone();\t\t\t\t\n\t})\n\t.catch( err => {\n\t\tdone(err)\n\t})",
                "err": {},
                "isRoot": false,
                "uuid": "32bfd205-4e85-4ad1-94aa-8be97f9c1ad2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32bfd205-4e85-4ad1-94aa-8be97f9c1ad2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 89,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5d0bb173-e10a-4f65-9bc4-35e5fcbc7a7c",
        "title": "/_plugin/ssh/download",
        "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5d331234-b7d0-4549-8d35-2264b5bc2361",
            "title": "download with password",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 200",
                "fullTitle": "/_plugin/ssh/download download with password should return 200",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp/upload.txt&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nrequest( opt )\n.then( (res) => {\t\n\t\t\n\tassert.strictEqual(res.statusCode, 200, 'status is not 200');\n\tassert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"upload.txt\"', 'Content-Disposition is not attachment');\n\tdone();\t\t\t\t\n})\n.catch( err => {\n\tdone(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "72f494c3-3a52-4be3-90b6-a7c5ce3bd97d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72f494c3-3a52-4be3-90b6-a7c5ce3bd97d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 253,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "04a3cc80-9a32-413a-a392-3eeaf873b30b",
            "title": "download not existing file",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 400",
                "fullTitle": "/_plugin/ssh/download download not existing file should return 400",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp/blablablaff.txt&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nexecRequestExpectError(opt, done, 400)",
                "err": {},
                "isRoot": false,
                "uuid": "12b21024-5af9-4dcf-b762-b5da28a32e78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12b21024-5af9-4dcf-b762-b5da28a32e78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 90,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a11cd19e-0cd2-441b-a90b-01619efd1b18",
            "title": "download directory",
            "fullFile": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "file": "D:\\projets\\mr-agent\\test\\worker\\50-plugin-ssh.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return 500",
                "fullTitle": "/_plugin/ssh/download download directory should return 500",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let params = 'path=/tmp&host='+SSH_HOST+'&username='+SSH_HOST_USERNAME+'&password='+SSH_HOST_PASSWORD+'&port='+SSH_HOST_PORT\nlet opt = getHttpOptions('GET', '/_plugin/ssh/download?'+params)\n\nexecRequestExpectError(opt, done, 500)",
                "err": {},
                "isRoot": false,
                "uuid": "32d1b27c-cc57-4e73-9236-ae4602fab0ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32d1b27c-cc57-4e73-9236-ae4602fab0ae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 170,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2020
}